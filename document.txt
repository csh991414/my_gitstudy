#til.lower() 소문자로 만들기
#til.upper() 대문자로 만들기
#lang.append() 문자열 안에 문자 채로 넣기
["Abc","BDSF"]
#for i in lang:
#print(i)
#lang안에 모든게 나온다.
#들여쓰기는 중요하다.

#문자열
#address.strip() =앞뒤 공백 제거
#lend(adress) = 문자열길이
#split( ) = 빈칸으로 쪼개기(다른거 넣을수도 있음)
#lang [:2] 라고 하면 0,1번 인덱스가 출력됨

#"_".join(리스트) 를 사용하면, 
띄어쓰기 칸 마다 _ 를 넣어서 출력이 가능하다.

---------------------------------------------------------------------

#pandas
#불러오기 import pandas as pd
 
series = 벡터
data frame = 행렬

#선언할적에 df=pd.DataFrame(블라블라)
#summarize data (a에 11이 몇번 나오는지) => df["a"].value_counts(11)
#df.sort_values("a")  => a에 들어가는 값들로 오름차순 정렬 나머지 bc들도 a의 열에 맞춰서 정렬
# df.sort_values("a", ascending =False) 라고 적으면 오름차순에서 내림차순으로 정렬 뒤집기
#df.drop(["c"],axis=1) /// c열을 모두 제거하고 출력된 값을 표현.
#df.groupby(["a"]]["b"].mean() //// a와 b의 평균값을  구해서 출력 열별로
#df.pivot_table(df, index="a") /// a에 어떤값에 대응하는 b값의 평균을 구해서 출력.
---------------------------------------------------------------------------------
#import pandas as pd
#import numpy as np
#import seaborn as sns
#import matplotlib.pyplot as plt
// 그래프  matplotlib 불러오는 것.
#데이터 불러오기
#pd.read_csv("블라블라")
#df.head() -앞에서 5개 정보 불러옴
#df.tail() -끝에서 5개 정보 불러옴
#df.sample() - 정보하나 샘플로 나옴
#df.columns - 이름들만 모아서 출력
#df.dtypes - 데이터 타입만 출력
# 결측치 : 결측치란 누락된 값, 비어 있는 값, NULL Data 를 의미합니다. 실제 데이터는 데이터 수집 과정에서 발생한 오류 등으로 인해 결측치가 포함되어 있는 경우가 많기 때문에 이 결측치를 정제하는 과정을 거쳐야만 함수 사용에 문제가 발생하지 않고 분석 결과에 왜곡이 없습니다. -구글검색
#df.isnull() - 결측치 전체를 보는거
#df.isnull().sum() = df.isna().sum() - 결측치 합을 숫자로 나타냄
#df.insull().sum().plot().bath(figsize=(10.3)) - plot으로 가벼운 시각화가 가능하다.
#df["(혈청지오티)ALT"] - 일정 데이터 요약
#df.groupby(["성별코드"]).mean() -그룹에대한 평균을 나타냄 앞에서 나온 내용이랑 비슷.
#df.pivot - 피봇테이블이 나온다!!
#둘다 서로 기능이 비슷하다고 하는데 피봇테이블이 연산속도가 그룹바이보다 빠르다고 한다. 근데 왜 groupby쓰는거지?;;
# h = df.hist(figsize=(12,12)) - 히스토그램!!! 중딩때 배운거 아는거 나와서 신남! 일단 표가 나온다. 드뎌 그림이 나오니까 뭔가 좋다.
# h = df.iloc[:, 12:24].hist(figsize(12, 12)) - iloc라는 함수로 어디서 어디까지의 데이터로 히스토그램을 그릴것인지 정한다.
# h = df.iloc[:, 12:24].hist(figsize(12, 12), bins=100) - 뒤에 bins! 라는걸 추가하면 더 얇게도 그릴수 있다.
#다음장에 seaborn 이 나오길래 히스토그램이 편한데 이거 왜쓰는거지 하는 궁금증이 들어서 구글링을 좀 해봤다. 
#All functions pyplot.hist, seaborn.countplot and seaborn.displot act as wrappers for a matplotlib bar plot and may be used if manually plotting such bar plot is considered too cumbersome.
For continuous variables, a pyplot.hist or seaborn.distplot may be used. For discrete variables, a seaborn.countplot is more convenient.
즉, 히스토그램은 연속형 변수에 표현하기에 더 좋고, seaborn 은 이산형 변수에 조금 더 특화된 거였다!!
# 히스토그램만 쓰고싶어.. (2개 기억하기 싫다)
#sns.barplot(data=df_sample, x="연령대코드(5세단위)", y="체중(5Kg 단위)", hue="성별코드", ci=None) - ci는 오차범위표시. 위에 검은색 막대기로 올라가는게 오차범위!!
#plt.figure(figsize=(15,4)
#sns.lineplot(data=df, x="연령대코드(5세단위)", y="체중(5Kg 단위)", hue="성별코드") - 이번에는 막대그래프에서 탈출이고 선형 그래프!!!! 오차범위를 여기는 그림자? 로 나타낸다! ci는 똑같지~
#sns.barpoint -막대그래프
#sns.pointplot- 포인트 그래프
#sns.boxplot -박스로 중간에 어디에 분포했는지를 알수 있다. ex)우리 대학 정시 지원할때 보이는 그 표 선 주욱 그어서 몇점대 어디 이런거~~
#sns.violinpoint - 박스포인트는 단점이 존재해서 그걸 보완한 것!
#sns.swarmplot - 점으로 분포를 표현한것!
#sns.scatterplot - 축구에서 보면, 그 점으로 흩어져 있는거 그 패스 대비 좋은패스 메시가 압도적인거 그거 ㅇㅇ
#sns.distplot - 히스토그램에서 선을 연결해서 곡선으로 부드럽게 이어지는 확률밀도함수!
# df_raw[df_raw["국가(대륙)별"] == "미국"] - 자료중에서 미국이란 나라만 따로 빼서 자료정리 가능






